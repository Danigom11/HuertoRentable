#!/usr/bin/env python3
"""
Script de prueba para el sistema de peso promedio autom√°tico
Verifica que al a√±adir unidades se calculen autom√°ticamente los kilos
"""

import requests
import json
import sys

BASE_URL = "http://127.0.0.1:5000"

def test_peso_promedio_system():
    """Prueba el sistema completo de peso promedio"""
    
    print("üß™ Iniciando pruebas del sistema de peso promedio")
    session = requests.Session()
    
    # 1. Ir a la p√°gina principal para obtener sesi√≥n
    print("\nüìù 1. Obteniendo sesi√≥n...")
    resp = session.get(f"{BASE_URL}/")
    if resp.status_code != 200:
        print(f"‚ùå Error obteniendo sesi√≥n: {resp.status_code}")
        return False
    print("‚úÖ Sesi√≥n obtenida correctamente")
    
    # 2. Crear un nuevo cultivo con peso promedio
    print("\nüå± 2. Creando cultivo con peso promedio...")
    cultivo_data = {
        'nombre': 'tomates_test_peso',
        'precio': '2.50',
        'numero_plantas': '10',
        'peso_promedio': '150'  # 150 gramos por tomate
    }
    
    resp = session.post(f"{BASE_URL}/api/crops", data=cultivo_data)
    if resp.status_code != 200:
        print(f"‚ùå Error creando cultivo: {resp.status_code}")
        print(f"Response: {resp.text}")
        return False
    
    result = resp.json()
    if not result.get('success'):
        print(f"‚ùå Error en respuesta: {result.get('message')}")
        return False
    
    crop_id = result.get('crop_id')
    print(f"‚úÖ Cultivo creado con ID: {crop_id}")
    
    # 3. A√±adir producci√≥n solo con unidades (debe calcular kilos autom√°ticamente)
    print("\nüìä 3. A√±adiendo producci√≥n con solo unidades...")
    produccion_data = {
        'unidades': '5'  # 5 tomates √ó 150g = 750g = 0.75kg
    }
    
    resp = session.post(f"{BASE_URL}/api/crops/{crop_id}/production", data=produccion_data)
    if resp.status_code != 200:
        print(f"‚ùå Error a√±adiendo producci√≥n: {resp.status_code}")
        print(f"Response: {resp.text}")
        return False
    
    result = resp.json()
    if not result.get('success'):
        print(f"‚ùå Error en respuesta de producci√≥n: {result.get('message')}")
        return False
    
    print("‚úÖ Producci√≥n a√±adida correctamente")
    
    # 4. Verificar que se calcularon los kilos autom√°ticamente
    print("\nüîç 4. Verificando c√°lculo autom√°tico de kilos...")
    resp = session.get(f"{BASE_URL}/api/crops")
    if resp.status_code != 200:
        print(f"‚ùå Error obteniendo cultivos: {resp.status_code}")
        return False
    
    cultivos = resp.json()
    
    # Buscar nuestro cultivo de prueba
    cultivo_test = None
    for cultivo in cultivos:
        if cultivo.get('nombre') == 'tomates_test_peso':
            cultivo_test = cultivo
            break
    
    if not cultivo_test:
        print("‚ùå No se encontr√≥ el cultivo de prueba")
        return False
    
    # Verificar que tiene producci√≥n
    produccion = cultivo_test.get('produccion_diaria', [])
    if not produccion:
        print("‚ùå No se encontr√≥ producci√≥n en el cultivo")
        return False
    
    ultima_produccion = produccion[-1]
    unidades = ultima_produccion.get('unidades')
    kilos = ultima_produccion.get('kilos')
    
    print(f"üìà Unidades registradas: {unidades}")
    print(f"üìà Kilos calculados: {kilos}")
    
    # Verificar el c√°lculo: 5 unidades √ó 150g = 750g = 0.75kg
    esperado_kilos = (5 * 150) / 1000  # 0.75
    
    if abs(kilos - esperado_kilos) < 0.01:  # Tolerancia de 0.01kg
        print(f"‚úÖ C√°lculo correcto: {kilos}kg (esperado: {esperado_kilos}kg)")
        
        # Verificar beneficio total
        precio_por_kilo = cultivo_test.get('precio_por_kilo', 0)
        beneficio_esperado = kilos * precio_por_kilo
        
        print(f"üí∞ Precio por kilo: {precio_por_kilo}‚Ç¨")
        print(f"üí∞ Beneficio esperado: {beneficio_esperado}‚Ç¨")
        
        print("\nüéâ ¬°Todas las pruebas pasaron exitosamente!")
        print("El sistema de peso promedio funciona correctamente")
        return True
    else:
        print(f"‚ùå C√°lculo incorrecto: {kilos}kg (esperado: {esperado_kilos}kg)")
        return False

if __name__ == "__main__":
    try:
        success = test_peso_promedio_system()
        if success:
            print("\n‚úÖ Sistema de peso promedio verificado correctamente")
            sys.exit(0)
        else:
            print("\n‚ùå Fall√≥ la verificaci√≥n del sistema de peso promedio")
            sys.exit(1)
    except Exception as e:
        print(f"\nüí• Error durante las pruebas: {e}")
        sys.exit(1)
