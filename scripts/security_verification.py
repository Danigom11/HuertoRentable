#!/usr/bin/env python3
"""
Script de verificaci√≥n de seguridad para HuertoRentable
Verifica que todas las rutas est√©n protegidas con autenticaci√≥n Firebase
"""
import os
import sys
import re
from pathlib import Path

def check_route_security(file_path):
    """Verifica que las rutas en un archivo est√©n protegidas"""
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Buscar rutas definidas con @bp.route
        route_pattern = r'@\w+_bp\.route\([\'"]([^\'"]+)[\'"]'
        routes = re.findall(route_pattern, content)
        
        # Buscar funciones de rutas
        function_pattern = r'@\w+_bp\.route.*?\ndef\s+(\w+)\s*\('
        functions = re.findall(function_pattern, content, re.DOTALL)
        
        # Buscar decoradores de autenticaci√≥n
        auth_decorators = [
            '@require_auth',
            '@optional_auth', 
            '@login_required',
            '@premium_required'
        ]
        
        for i, route in enumerate(routes):
            # Saltar rutas p√∫blicas conocidas
            public_routes = [
                '/',
                '/login',
                '/register', 
                '/register-simple',
                '/register-local',
                '/plans',
                '/logout',
                '/ping',
                '/version',
                '/health',
                '/status',
                '/manifest.json',
                '/service-worker.js',
                '/config/firebase',
                '/clear-session',
                '/diagnostico-firebase',
                '/firebase-test-clean',
                '/test-completo',
                '/test-session',
                '/debug/session',
                '/debug/force-session',
                '/test-registro-manual',
                '/test-firebase-config',
                '/test-cultivo-simple',
                '/onboarding',
                '/verify-token',
                '/sync-user',
                '/upgrade-plan',
                '/api/user-crops'  # Endpoint p√∫blico para compatibilidad
            ]
            
            # Rutas de debug y p√∫blicas
            if (route in public_routes or 
                route.startswith('/debug') or 
                route.startswith('/test-') or 
                route.startswith('/api/user-status') or  # endpoint p√∫blico de estado
                '/health' in route or 
                '/status' in route):
                continue
                
            # Buscar si la funci√≥n correspondiente tiene decorador de auth
            if i < len(functions):
                func_name = functions[i]
                
                # Encontrar el fragmento de c√≥digo de esta funci√≥n
                func_start = content.find(f'def {func_name}(')
                if func_start == -1:
                    continue
                    
                # Buscar hacia atr√°s desde la funci√≥n para encontrar decoradores
                lines_before_func = content[:func_start].split('\n')[-10:]  # √öltimas 10 l√≠neas
                
                has_auth_decorator = any(
                    any(decorator in line for decorator in auth_decorators)
                    for line in lines_before_func
                )
                
                if not has_auth_decorator:
                    issues.append(f"‚ùå Ruta {route} (funci√≥n {func_name}) sin decorador de autenticaci√≥n")
                else:
                    print(f"‚úÖ Ruta {route} protegida correctamente")
                    
    except Exception as e:
        issues.append(f"‚ùå Error leyendo {file_path}: {e}")
        
    return issues

def check_uid_parameter_usage(file_path):
    """Verifica que no se use UID desde par√°metros de request"""
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Patrones peligrosos de uso de UID (solo los m√°s cr√≠ticos)
        dangerous_patterns = [
            r'request\.args\.get\([\'"]uid[\'"].*\)',  # Usar UID desde URL params
            r'request\.form\.get\([\'"]uid[\'"].*\)',  # Usar UID desde form data
            # Removemos el patr√≥n user['uid'] porque puede ser leg√≠timo en algunos contextos
        ]
        
        for pattern in dangerous_patterns:
            matches = re.findall(pattern, content)
            if matches:
                issues.append(f"‚ùå Uso inseguro de UID detectado en {file_path}: {pattern}")
                
        # Verificar uso correcto de get_current_user_uid()
        secure_pattern = r'get_current_user_uid\(\)'
        if re.search(secure_pattern, content):
            print(f"‚úÖ Uso seguro de UID detectado en {file_path}")
            
    except Exception as e:
        issues.append(f"‚ùå Error verificando UID en {file_path}: {e}")
        
    return issues

def check_firebase_admin_import(file_path):
    """Verifica que se use Firebase Admin SDK correctamente"""
    issues = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Verificar importaci√≥n de Firebase Admin
        if 'firebase_admin' in content:
            if 'import firebase_admin' in content or 'from firebase_admin import' in content:
                print(f"‚úÖ Firebase Admin SDK importado correctamente en {file_path}")
            else:
                issues.append(f"‚ùå Uso de firebase_admin sin importaci√≥n expl√≠cita en {file_path}")
                
        # Verificar uso de auth.verify_id_token
        if 'verify_id_token' in content:
            print(f"‚úÖ Verificaci√≥n de tokens Firebase encontrada en {file_path}")
            
    except Exception as e:
        issues.append(f"‚ùå Error verificando Firebase Admin en {file_path}: {e}")
        
    return issues

def main():
    """Funci√≥n principal de verificaci√≥n"""
    print("üîê Iniciando verificaci√≥n de seguridad para HuertoRentable")
    print("=" * 60)
    
    # Directorios a verificar
    app_dir = Path("app")
    if not app_dir.exists():
        print("‚ùå Directorio 'app' no encontrado")
        sys.exit(1)
    
    all_issues = []
    
    # Verificar archivos de rutas
    route_files = [
        "app/routes/main.py",
        "app/routes/crops.py", 
        "app/routes/analytics.py",
        "app/routes/api.py",
        "app/routes/auth.py"
    ]
    
    print("\nüìã Verificando seguridad de rutas...")
    for file_path in route_files:
        if os.path.exists(file_path):
            print(f"\nüîç Verificando {file_path}...")
            issues = check_route_security(file_path)
            issues.extend(check_uid_parameter_usage(file_path))
            all_issues.extend(issues)
        else:
            print(f"‚ö†Ô∏è Archivo {file_path} no encontrado")
    
    # Verificar middleware de autenticaci√≥n
    print(f"\nüîç Verificando middleware de autenticaci√≥n...")
    middleware_file = "app/middleware/auth_middleware.py"
    if os.path.exists(middleware_file):
        issues = check_firebase_admin_import(middleware_file)
        all_issues.extend(issues)
        print(f"‚úÖ Middleware de autenticaci√≥n encontrado")
    else:
        all_issues.append("‚ùå Middleware de autenticaci√≥n no encontrado")
    
    # Verificar servicio de autenticaci√≥n
    print(f"\nüîç Verificando servicio de autenticaci√≥n...")
    auth_service_file = "app/auth/auth_service.py"
    if os.path.exists(auth_service_file):
        issues = check_firebase_admin_import(auth_service_file)
        all_issues.extend(issues)
        print(f"‚úÖ Servicio de autenticaci√≥n encontrado")
    else:
        all_issues.append("‚ùå Servicio de autenticaci√≥n no encontrado")
    
    # Verificar servicios
    print(f"\nüîç Verificando servicios...")
    service_files = [
        "app/services/crop_service.py",
        "app/services/plan_service.py"
    ]
    
    for file_path in service_files:
        if os.path.exists(file_path):
            issues = check_uid_parameter_usage(file_path)
            all_issues.extend(issues)
        else:
            print(f"‚ö†Ô∏è Archivo {file_path} no encontrado")
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE VERIFICACI√ìN DE SEGURIDAD")
    print("=" * 60)
    
    if all_issues:
        print(f"‚ùå Se encontraron {len(all_issues)} problemas de seguridad:")
        for issue in all_issues:
            print(f"  {issue}")
        print("\nüö® ACCI√ìN REQUERIDA: Corregir problemas de seguridad antes del despliegue")
        sys.exit(1)
    else:
        print("‚úÖ ¬°VERIFICACI√ìN EXITOSA!")
        print("üîí Todas las rutas est√°n protegidas correctamente")
        print("üõ°Ô∏è No se detectaron vulnerabilidades de seguridad")
        print("üöÄ El sistema est√° listo para despliegue seguro")
        
    print("\nüéØ Verificaci√≥n completada")

if __name__ == "__main__":
    main()
